/*
Deployment script for SR_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SR_DB"
:setvar DefaultFilePrefix "SR_DB"
:setvar DefaultDataPath "C:\Users\Norman\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Norman\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Bookings]...';


GO
CREATE TABLE [dbo].[Bookings] (
    [Id]            INT      IDENTITY (1, 1) NOT NULL,
    [clientId]      INT      NOT NULL,
    [planet]        BIT      NOT NULL,
    [stopover]      BIT      NOT NULL,
    [planet_portId] INT      NOT NULL,
    [dateA]         DATETIME NOT NULL,
    [dateB]         DATETIME NOT NULL,
    [is_1stclass]   BIT      NOT NULL,
    [price]         INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Clients]...';


GO
CREATE TABLE [dbo].[Clients] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [fname]      NVARCHAR (50) NOT NULL,
    [lname]      NVARCHAR (50) NOT NULL,
    [bdate]      DATETIME      NOT NULL,
    [email]      NVARCHAR (50) NOT NULL,
    [pass]       NVARCHAR (50) NOT NULL,
    [ccard]      NVARCHAR (50) NOT NULL,
    [idcard]     NVARCHAR (50) NOT NULL,
    [book_count] INT           NOT NULL,
    [is_vip]     BIT           NOT NULL,
    [is_healthy] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Planets]...';


GO
CREATE TABLE [dbo].[Planets] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [name]        NVARCHAR (50) NOT NULL,
    [capacity]    INT           NOT NULL,
    [distance_m]  INT           NOT NULL,
    [distance_h]  INT           NOT NULL,
    [fuel_req]    INT           NOT NULL,
    [atmosphere]  NVARCHAR (10) NOT NULL,
    [ports_count] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Ports]...';


GO
CREATE TABLE [dbo].[Ports] (
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    [name]     NVARCHAR (50) NOT NULL,
    [planetId] INT           NOT NULL,
    [capacity] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [fname]      NVARCHAR (50) NOT NULL,
    [lname]      NVARCHAR (50) NOT NULL,
    [bdate]      DATETIME      NOT NULL,
    [email]      NVARCHAR (50) NOT NULL,
    [pass]       NVARCHAR (50) NOT NULL,
    [ccard]      NVARCHAR (50) NULL,
    [idcard]     INT           NULL,
    [book_count] INT           NOT NULL,
    [isAdmin]    BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Clients]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD DEFAULT 0 FOR [book_count];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Clients]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD DEFAULT 0 FOR [is_vip];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [book_count];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [isAdmin];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Bookings_ToTable_Clients]...';


GO
ALTER TABLE [dbo].[Bookings]
    ADD CONSTRAINT [FK_Bookings_ToTable_Clients] FOREIGN KEY ([clientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Bookings_ToTable_Ports]...';


GO
ALTER TABLE [dbo].[Bookings]
    ADD CONSTRAINT [FK_Bookings_ToTable_Ports] FOREIGN KEY ([planet_portId]) REFERENCES [dbo].[Ports] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Ports_ToTable_Planets]...';


GO
ALTER TABLE [dbo].[Ports]
    ADD CONSTRAINT [FK_Ports_ToTable_Planets] FOREIGN KEY ([planetId]) REFERENCES [dbo].[Planets] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Users_ToTable_Clients]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_ToTable_Clients] FOREIGN KEY ([Id]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[AddBooking]...';


GO
CREATE PROCEDURE [dbo].[AddBooking]
	@clientId INT,
	@planet BIT,
	@stopover BIT,
	@planet_portId INT,
	@dateA DATETIME,
	@dateB DATETIME,
	@is_1stclass BIT,
	@price INT
AS
BEGIN
	INSERT INTO [Bookings] (clientId, planet, stopover, planet_portId, dateA, dateB, is_1stclass, price) VALUES (@clientId, @planet, @stopover, @planet_portId, @dateA, @dateB, @is_1stclass, @price);
	RETURN 0
end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd0d3db49-7ddf-4426-95b0-229a585e758d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d0d3db49-7ddf-4426-95b0-229a585e758d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2c40f582-5f9e-46a9-a7ff-c454211c84d9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2c40f582-5f9e-46a9-a7ff-c454211c84d9')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--INSERT INTO [Clients] ([fname], [lname], [bdate], [email], [pass], [ccard], [idcard], [book_count], [is_vip], [is_healthy]) VALUES ('David', 'Bowman', 30/05/1970, 'db@gmail.com', 'pw', 'XXXX-XXXX-XXXX-XXXX', 'A9F41KV', DEFAULT, 1, 1);
--INSERT INTO [Clients] ([fname], [lname], [bdate], [email], [pass], [ccard], [idcard], [book_count], [is_vip], [is_healthy]) VALUES ('John', 'Doe', 02/07/1978, 'jd@gmail.com', 'pw', 'XXXX-XXXX-XXXX-XXXX', 'Y3GN98B', DEFAULT, DEFAULT, 1);

--INSERT INTO [Planets] (
--    [name],
--    [capacity], 
--    [distance_m], 
--    [distance_h], 
--    [fuel_req], 
--    [atmosphere], 
--    [ports_count]
--    ) VALUES ('Saturn', 437, 120, 191, 50000, 'hydrogen', 1);

--INSERT INTO [Planets] (
--    [name],
--    [capacity], 
--    [distance_m], 
--    [distance_h], 
--    [fuel_req], 
--    [atmosphere], 
--    [ports_count]
--    ) VALUES ('Jupiter', 698, 444, 57, 3100, 'helium', 2);

--INSERT INTO [Users] ([fname], [lname], [bdate], [email], [pass], [ccard], [idcard], [book_count], [isAdmin]) VALUES ('Hal', '9000', 12/01/1992, 'h9@srite.com', 'pw', null, null, DEFAULT, 1);
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
